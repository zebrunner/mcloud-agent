#!/bin/bash

if [ ! -z $ACTION ]; then
  # triggered by udev rule where device serial (udid) is a must to proceed!
  if [ -z $2 ]; then
    echo "do nothing as device id/udid missed."
    exit 0
  fi
else
  ACTION=$1
fi
#echo ACTION: $ACTION

# useful export command to detect existing env vars per each device/vendor
#export

function create_containers() {
  local device_name=$1
  #echo "device_name: $device_name"

  local udid=$2
  #echo "udid: $udid"

  local device_name_underscored=$3

  local container=device-{{ PROJECT_NAME }}-$device_name_underscored-$udid

  #verify if device containers already exist and do nothing then
  docker ps -a | grep -v appium | grep $container > /dev/null
  local isDeviceExists=$?
  #echo isDeviceExists: $isDeviceExists

  docker ps -a | grep appium | grep $container > /dev/null
  local isAppiumExists=$?
  #echo isAppiumExists: $isAppiumExists

  docker ps -a | grep connector | grep $container > /dev/null
  local isConnectorExists=$?
  #echo isConnectorExists: $isConnectorExists

  if [ $isDeviceExists -eq 0 ] && [ $isAppiumExists -eq 0 ] && [ $isConnectorExists -eq 0 ]; then
    echo "WARN! do nothing as containers already exists!"
    return 0
  fi

  local devices=/usr/local/bin/{{ PROJECT_NAME }}-mcloud-devices.txt

  local platform_name=$(cat ${devices} | grep "$udid" | cut -d '|' -f 2)
  #echo "platform_name: $platform_name"

  local device_adb_port=$(cat ${devices} | grep "$udid" | cut -d '|' -f 4)
  #echo "device_adb_port: $device_adb_port"

  local stf_min_port=$(cat ${devices} | grep "$udid" | cut -d '|' -f 5)
  #echo "stf_min_port: $stf_min_port"

  local stf_max_port=$(cat ${devices} | grep "$udid" | cut -d '|' -f 6)
  #echo "stf_max_port: $stf_max_port"

  local proxy_port=$(cat ${devices} | grep "$udid" | cut -d '|' -f 7)
  #echo "proxy_port: $proxy_port"

  local appium_port=$(cat ${devices} | grep "$udid" | cut -d '|' -f 8)
  #echo "appium_port: $appium_port"

  local wireless=$(cat ${devices} | grep "$udid" | cut -d '|' -f 9)
  #echo "wireless: $wireless"

  local server_proxy_port=$(cat ${devices} | grep "$udid" | cut -d '|' -f 12)
  #echo "server_proxy_port: $server_proxy_port"

  # without 'block_global=false' mitmproxy does not want to accept requests from devices
  # --set confdir allows to provide custom folder with CA Authority certificates
  local proxy_permament_arguments="--set block_global=false --set confdir=/opt/mitmproxy"

  local net="infra_{{ PROJECT_NAME }}"

  docker network inspect ${net} > /dev/null 2>&1 || docker network create ${net}
  usb_bus=$(readlink -f /dev/device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid})
  #echo "usb_bus: ${usb_bus}"

  # for the physically connected devices via usb
  local ANDROID_DEVICE=
  local STF_DEVICE_UDID=${udid}
  local DEVICE_ARG=--device=/dev/device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:${usb_bus}

  if [ "$wireless" = "True" ]; then
    # provide ANDROID_DEVICE with 5555 port to trigger remote adb connect on appium startup
    ANDROID_DEVICE=$udid:5555
    # append 5555 port to be able to rename device in STF
    STF_DEVICE_UDID=$udid:5555
    # reset device arg as no symlink generated for the wireless device
    DEVICE_ARG=
  else
    cleanUdid=$(echo "$udid" | tr -d '-')
    connectedDevices=$(lsusb -v 2> /dev/null)
    if echo "$connectedDevices" | grep -q "$cleanUdid"; then
      echo -e "\nDevice with udid: '$cleanUdid' was SUCCESSFULLY detected as connected."
    else
      echo -e "\nDevice with udid: '$cleanUdid' was NOT detected as connected. The containers will not be created."
      return 1
    fi
  fi

  echo -e "\n\tCreating '$udid' containers:\n"

  local S3_KEY_PATTERN=
  local TENANT={{ S3_TENANT }}
  local BUCKET={{ S3_BUCKET }}
  if [ -z $TENANT ] && [ ! -z $BUCKET ]; then
    # use-case with embedded minio storage
    S3_KEY_PATTERN=s3://$BUCKET/artifacts/test-sessions
  fi

  if [ ! -z $TENANT ] && [ ! -z $BUCKET ]; then
    S3_KEY_PATTERN=s3://$BUCKET/$TENANT/artifacts/test-sessions
  fi

  if [ $platform_name == "android" ]; then

    if [ "$server_proxy_port" != "0" ] && [ "$proxy_port" != "0" ]; then
      echo -n "device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-mitm:       "
      docker run -itd --name device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-mitm -m 1g --log-opt max-size=1024m --log-opt max-file=2 --net=${net} \
        --restart on-failure:{{ RESTARTS_LIMIT }} \
        -v mcloud-mitm-volume:/opt/mitmproxy \
        -e PROXY_PERMANENT_ARGS="$proxy_permament_arguments" \
        -p ${server_proxy_port}:8060 -p ${proxy_port}:8080 \
        {{ MITM_IMAGE }}:{{ MITM_VERSION }} || echo 'already created'
    fi

    echo -n "device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-connector:  "
    docker run -itd --name device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-connector --net=${net} \
      --restart on-failure:{{ RESTARTS_LIMIT }} $DEVICE_ARG \
      -e DEVICE_BUS=$usb_bus \
      -v mcloud-key-volume:/root/.android \
      -v device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:/tmp/log \
      -e PLATFORM_NAME=$platform_name \
      -e ANDROID_DEVICE=$ANDROID_DEVICE \
      -e DEVICE_UDID="$STF_DEVICE_UDID" \
      {{ ANDROID_CONNECTOR_IMAGE }}:{{ ANDROID_CONNECTOR_VERSION }} || echo 'already created'

    echo -n "device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:            "
    docker run -d --name device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid} --log-opt max-size=1024m --log-opt max-file=2 --net=${net} \
      --link device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-connector:connector \
      -e STF_PROVIDER_ADB_HOST=connector \
      -e STF_PROVIDER_ADB_PORT=5037 \
      --health-start-period 60s \
      --restart on-failure:{{ RESTARTS_LIMIT }} \
      -e PLATFORM_NAME=$platform_name \
      -e STF_PROVIDER_DEVICE_NAME="${device_name}" \
      -e DEVICE_UDID="$STF_DEVICE_UDID" \
      -e STF_PROVIDER_HOST={{ STF_PROVIDER_HOST }} \
      -e STF_PROVIDER_NAME="{{ STF_PROVIDER_NAME }}" \
      -e STF_PROVIDER_MIN_PORT=$stf_min_port \
      -e STF_PROVIDER_MAX_PORT=$stf_max_port \
      -p $stf_min_port-$stf_max_port:$stf_min_port-$stf_max_port \
      -e STF_PROVIDER_PUBLIC_IP={{ PUBLIC_IP }} \
      -e PUBLIC_IP_PORT={{ PUBLIC_IP_PORT }} \
      -e PUBLIC_IP_PROTOCOL={{ PUBLIC_IP_PROTOCOL }} \
      -e STF_PROVIDER_CONNECT_SUB={{ STF_PROVIDER_CONNECT_SUB }} \
      -e STF_PROVIDER_CONNECT_PUSH={{ STF_PROVIDER_CONNECT_PUSH }} \
      -e RETHINKDB_PORT_28015_TCP={{ STF_RETHINKDB }} \
      {{ DEVICE_IMAGE }}:{{DEVICE_VERSION }} || echo 'already created'

    #        Adb config env vars
    #        -e ADB_SERVER_SOCKET=tcp:connector:5037 \
    #        or
    #        -e ANDROID_ADB_SERVER_ADDRESS=connector \
    #        -e ANDROID_ADB_SERVER_PORT=5037 \

    #TODO: parametrized relaxed security, make false by default!
    echo -n "device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-appium:     "
    docker run -itd --name device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-appium -m 1g --log-opt max-size=1024m --log-opt max-file=2 --net=${net} \
      --restart on-failure:{{ RESTARTS_LIMIT }} \
      --link device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:device \
      --link device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-connector:connector \
      -v appium-storage-volume:/opt/appium-storage \
      -v device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:/tmp/log \
      -e TASK_LOG=/tmp/log/appium.log \
      -e PLATFORM_NAME=$platform_name \
      -e ANDROID_DEVICE=$ANDROID_DEVICE \
      -e RETAIN_TASK=true \
      -e CONNECT_TO_GRID=true \
      -e CUSTOM_NODE_CONFIG=true \
      -e STF_PROVIDER_HOST={{ STF_PROVIDER_HOST }} \
      -e APPIUM_APP_SIZE_DISABLE={{ APPIUM_APP_SIZE_DISABLE }} \
      -e APPIUM_APP_FETCH_RETRIES={{ APPIUM_APP_FETCH_RETRIES }} \
      -e APPIUM_MAX_LOCK_FILE_LIFETIME={{ APPIUM_MAX_LOCK_FILE_LIFETIME }} \
      -e APPIUM_APP_WAITING_TIMEOUT={{ APPIUM_APP_WAITING_TIMEOUT }} \
      -e SELENIUM_HOST={{ SELENIUM_HUB_HOST }} \
      -e SELENIUM_PORT={{ SELENIUM_HUB_PORT }} \
      -e DEFAULT_CAPABILITIES=true \
      -e DEVICE_NAME="${device_name}" \
      -e DEVICE_UDID="$STF_DEVICE_UDID" \
      -e ADB_PORT=$device_adb_port \
      -e PROXY_PORT=$proxy_port \
      -e SERVER_PROXY_PORT=$server_proxy_port \
      -e APPIUM_PORT=$appium_port \
      -p $appium_port:$appium_port \
      -e RELAXED_SECURITY=true \
      -e ADB_SERVER_SOCKET=tcp:connector:5037 \
      -e REMOTE_ADB_HOST=connector \
      -e STF_API_URL={{ STF_API_URL }} \
      -e STF_AUTH_TOKEN={{ STF_AUTH_TOKEN }} \
      {{ APPIUM_IMAGE }}:{{ APPIUM_VERSION }} || echo 'already created'

    echo -n "device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-uploader:   "
    docker run -d --name device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-uploader --log-opt max-size=1024m --log-opt max-file=2 --net=${net} \
      --restart on-failure:{{ RESTARTS_LIMIT }} \
      -v device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:/tmp/log \
      -e ENDPOINT_URL={{ S3_ENDPOINT }} \
      -e S3_KEY_PATTERN=${S3_KEY_PATTERN} \
      -e AWS_ACCESS_KEY_ID={{ S3_ACCESS_KEY_ID }} \
      -e AWS_SECRET_ACCESS_KEY={{ S3_SECRET }} \
      -e AWS_DEFAULT_REGION={{ S3_REGION }} \
      {{ UPLOADER_IMAGE }}:{{ UPLOADER_VERSION }} || echo 'already created'

  elif [ $platform_name == "ios" ]; then

    #TODO: comment echoing wda related detailes before release
    local wdaIpaPath={{ WDA_FILE }}
    local deviceWdaIpaPath=$(cat ${devices} | grep "$udid" | cut -d '|' -f 10)
    if [ ! -z $deviceWdaIpaPath ] && [ ! "$deviceWdaIpaPath" == "/dev/null" ]; then
      wdaIpaPath=$deviceWdaIpaPath
    fi
    if [ -z $wdaIpaPath ]; then
      # unable to use empty value for docker volume share!
      wdaIpaPath="/dev/null"
    fi
    echo "wdaIpaPath: $wdaIpaPath"

    local wdaBundleId={{ WDA_BUNDLEID }}
    local deviceWdaBundleId=$(cat ${devices} | grep "$udid" | cut -d '|' -f 11)
    if [ ! -z $deviceWdaBundleId ]; then
      wdaBundleId=$deviceWdaBundleId
    fi
    if [ -z $wdaBundleId ]; then
      # provide default value if empty
      wdaBundleId="com.facebook.WebDriverAgentRunner.xctrunner"
    fi
    echo -e "wdaBundleId: $wdaBundleId\n"

    if [ "$server_proxy_port" != "0" ] && [ "$proxy_port" != "0" ]; then
      echo -n "device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-mitm:       "
      docker run -itd --name device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-mitm -m 1g --log-opt max-size=1024m --log-opt max-file=2 --net=${net} \
        --restart on-failure:{{ RESTARTS_LIMIT }} \
        -v mcloud-mitm-volume:/opt/mitmproxy \
        -e PROXY_PERMANENT_ARGS="$proxy_permament_arguments" \
        -p ${server_proxy_port}:8060 -p ${proxy_port}:8080 \
        {{ MITM_IMAGE }}:{{ MITM_VERSION }} || echo 'already created'
    fi

    echo -n "device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-connector:  "
    docker run -itd --name device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-connector --net=${net} \
      --sysctl net.ipv6.conf.all.disable_ipv6=0 \
      --restart on-failure:{{ RESTARTS_LIMIT }} $DEVICE_ARG \
      --cap-add=NET_ADMIN \
      --device=/dev/net/tun \
      -e HOST_OS=LINUX \
      -e DEVICE_BUS=$usb_bus \
      -e WDA_BUNDLEID=$wdaBundleId \
      -e WDA_FILE=/tmp/zebrunner/WebDriverAgent.ipa \
      -v ${wdaIpaPath}:/tmp/zebrunner/WebDriverAgent.ipa \
      -v device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-lockdown:/var/lib/lockdown \
      -v device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:/tmp/log \
      -e DEVICE_UDID="$STF_DEVICE_UDID" \
      {{ IOS_CONNECTOR_IMAGE }}:{{ IOS_CONNECTOR_VERSION }} || echo 'already created'

    # Linking with apppium required to share usbmuxd via socat
    echo -n "device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:            "
    docker run -d --name device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid} --log-opt max-size=1024m --log-opt max-file=2 --net=${net} \
      --restart on-failure:{{ RESTARTS_LIMIT }} \
      --link device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-connector:connector \
      -e WDA_HOST=connector \
      -e WDA_WAIT_TIMEOUT=60 \
      -e PLATFORM_NAME=$platform_name \
      -e STF_PROVIDER_DEVICE_NAME="${device_name}" \
      -e DEVICE_UDID="${udid}" \
      -e STF_PROVIDER_HOST={{ STF_PROVIDER_HOST }} \
      -e STF_PROVIDER_NAME="{{ STF_PROVIDER_NAME }}" \
      -e STF_PROVIDER_MIN_PORT=$stf_min_port \
      -e STF_PROVIDER_MAX_PORT=$stf_max_port \
      -p $stf_min_port-$stf_max_port:$stf_min_port-$stf_max_port \
      -e STF_PROVIDER_PUBLIC_IP={{ PUBLIC_IP }} \
      -e PUBLIC_IP_PORT={{ PUBLIC_IP_PORT }} \
      -e PUBLIC_IP_PROTOCOL={{ PUBLIC_IP_PROTOCOL }} \
      -e STF_PROVIDER_CONNECT_SUB={{ STF_PROVIDER_CONNECT_SUB }} \
      -e STF_PROVIDER_CONNECT_PUSH={{ STF_PROVIDER_CONNECT_PUSH }} \
      -e STF_PROVIDER_CONNECT_APP_DEALER={{ STF_PROVIDER_CONNECT_APP_DEALER }} \
      -e STF_PROVIDER_CONNECT_DEV_DEALER={{ STF_PROVIDER_CONNECT_DEV_DEALER }} \
      -e RETHINKDB_PORT_28015_TCP={{ STF_RETHINKDB }} \
      {{ DEVICE_IMAGE }}:{{DEVICE_VERSION }} || echo 'already created'

    # candidates for removal: ADB_PORT, STF_PROVIDER_MAX_PORT
    echo -n "device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-appium:     "
    docker run -itd --name device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-appium -m 1g --log-opt max-size=1024m --log-opt max-file=2 --net=${net} \
      --restart on-failure:{{ RESTARTS_LIMIT }} $DEVICE_ARG \
      --link device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:device \
      --link device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-connector:connector \
      -e WDA_HOST=connector \
      -v appium-storage-volume:/opt/appium-storage \
      -v device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:/tmp/log \
      -e TASK_LOG=/tmp/log/appium.log \
      -e APPIUM_CLI="--session-override" \
      -e PLATFORM_NAME=$platform_name \
      -e RETAIN_TASK=true \
      -e CONNECT_TO_GRID=true \
      -e CUSTOM_NODE_CONFIG=true \
      -e STF_PROVIDER_HOST={{ STF_PROVIDER_HOST }} \
      -e APPIUM_APP_SIZE_DISABLE={{ APPIUM_APP_SIZE_DISABLE }} \
      -e APPIUM_APP_FETCH_RETRIES={{ APPIUM_APP_FETCH_RETRIES }} \
      -e APPIUM_MAX_LOCK_FILE_LIFETIME={{ APPIUM_MAX_LOCK_FILE_LIFETIME }} \
      -e APPIUM_APP_WAITING_TIMEOUT={{ APPIUM_APP_WAITING_TIMEOUT }} \
      -e SELENIUM_HOST={{ SELENIUM_HUB_HOST }} \
      -e SELENIUM_PORT={{ SELENIUM_HUB_PORT }} \
      -e DEFAULT_CAPABILITIES=true \
      -e DEVICE_NAME="${device_name}" \
      -e DEVICE_UDID="${udid}" \
      -e ADB_PORT=$device_adb_port \
      -e PROXY_PORT=$proxy_port \
      -e SERVER_PROXY_PORT=$server_proxy_port \
      -e APPIUM_PORT=$appium_port \
      -p $appium_port:$appium_port \
      -e RELAXED_SECURITY=true \
      {{ APPIUM_IMAGE }}:{{ APPIUM_VERSION }}

    echo -n "device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-uploader:   "
    docker run -d --name device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}-uploader --log-opt max-size=1024m --log-opt max-file=2 --net=${net} \
      --restart on-failure:{{ RESTARTS_LIMIT }} \
      -v device-{{ PROJECT_NAME }}-${device_name_underscored}-${udid}:/tmp/log \
      -e ENDPOINT_URL={{ S3_ENDPOINT }} \
      -e S3_KEY_PATTERN=${S3_KEY_PATTERN} \
      -e AWS_ACCESS_KEY_ID={{ S3_ACCESS_KEY_ID }} \
      -e AWS_SECRET_ACCESS_KEY={{ S3_SECRET }} \
      -e AWS_DEFAULT_REGION={{ S3_REGION }} \
      {{ UPLOADER_IMAGE }}:{{ UPLOADER_VERSION }} || echo 'already created'

  else
    echo "ERROR! Unsupported platform: ${platform_name}"
    return 1
  fi
}

function stop() {
  local filter_device=$1
  local devices=/usr/local/bin/{{ PROJECT_NAME }}-mcloud-devices.txt

  # if $device is empty do stop for all connected devices otherwise stop only filtered
  if [ ! -z $filter_device ] && [ "$filter_device" != "ios" ] && [ "$filter_device" != "android" ]; then
    echo stopping containers for $filter_device...
    local device_name=$(cat ${devices} | grep "$filter_device" | cut -d '|' -f 1)
    local device_name_underscored=${device_name// /_}
    local udid=$(cat ${devices} | grep "$filter_device" | cut -d '|' -f 3)

    if [ -z "$device_name" ] || [ -z $udid ]; then
      echo_warning "Unable to find device by \"$filter_device\"!"
      return 0
    fi

    stop_containers ${device_name_underscored} ${udid}
  else
    # as no device filter provided continue with stopping all device containers
    while read -r line; do
      local device_name=$(echo ${line} | grep "$filter_device" | cut -d '|' -f 1)
      #echo "device_name: $device_name"
      local device_name_underscored=${device_name// /_}

      local udid=$(echo ${line} | grep "$filter_device" | cut -d '|' -f 3)
      #echo "udid: $udid"
      local wireless=$(echo ${line} | grep "$filter_device" | cut -d '|' -f 9)

      if [ -L "/dev/device-{{ PROJECT_NAME }}-${device_name}-${udid}" ] || [ "$wireless" == "True" ]; then
        stop_containers ${device_name_underscored} ${udid}
      fi
    done < ${devices}
  fi
}

function stop_containers() {
  echo -e "\n\tStop $udid containers:"
  local device=$1
  #echo "device: $device"

  local udid=$2
  #echo "udid: $udid"

  local container=device-{{ PROJECT_NAME }}-$device-$udid
  echo "$container stopping..."
  #TODO: retest below assumption
  # appium should be stopped first to disconnect in STF asap
  docker stop $container
  docker stop $container-mitm
  docker stop $container-appium
  docker stop $container-uploader
  docker stop $container-connector
}

function down() {
  local filter_device=$1
  local devices=/usr/local/bin/{{ PROJECT_NAME }}-mcloud-devices.txt

  # if $device is empty do rm for all connected devices otherwise rm only filtered
  if [ ! -z $filter_device ] && [ "$filter_device" != "ios" ] && [ "$filter_device" != "android" ]; then
    #echo removing containers for $filter_device...
    local device_name=$(cat ${devices} | grep "$filter_device" | cut -d '|' -f 1)
    local device_name_underscored=${device_name// /_}
    local udid=$(cat ${devices} | grep "$filter_device" | cut -d '|' -f 3)

    if [ -z "$device_name" ] || [ -z $udid ]; then
      echo_warning "Unable to find device by \"$filter_device\"!"
      return 0
    fi

    remove_containers ${device_name_underscored} ${udid}
  else
    while read -r line; do
      local device_name=$(echo ${line} | grep "$filter_device" | cut -d '|' -f 1)
      #echo "device_name: $device_name"
      local device_name_underscored=${device_name// /_}

      local udid=$(echo ${line} | grep "$filter_device" | cut -d '|' -f 3)
      #echo "udid: $udid"
      remove_containers ${device_name_underscored} ${udid}
    done < ${devices}
  fi
}

function remove_containers() {
  echo -e "\n\tRemoving '$udid' data:\n"
  local device=$1
  #echo "device: $device"

  local udid=$2
  #echo "udid: $udid"

  local container=device-{{ PROJECT_NAME }}-$device-$udid
  #echo "$container removing..."
  # remove container(s) only if exists
  echo -n "STF:        "
  docker ps -a | grep -v appium | grep $container > /dev/null
  if [ $? -eq 0 ]; then
    docker rm -f $container
  else
    echo "container not found"
  fi

  echo -n "MITM:       "
  docker ps -a | grep mitm | grep $container > /dev/null
  if [ $? -eq 0 ]; then
    docker rm -f $container-mitm
  else
    echo "container not found"
  fi

  echo -n "Appium:     "
  docker ps -a | grep appium | grep $container > /dev/null
  if [ $? -eq 0 ]; then
    # remove appium first to disconnect device in stf asap
    docker rm -f $container-appium
  else
    echo "container not found"
  fi

  echo -n "Uploader:   "
  docker ps -a | grep uploader | grep $container > /dev/null
  if [ $? -eq 0 ]; then
    docker rm -f $container-uploader
  else
    echo "container not found"
  fi

  echo -n "Connector:  "
  docker ps -a | grep connector | grep $container > /dev/null
  if [ $? -eq 0 ]; then
    docker rm -f $container-connector
  else
    echo "container not found"
  fi

  echo -ne "--\nVolume:     "
  docker volume ls | grep "$container$" > /dev/null
  if [ $? -eq 0 ]; then
    docker volume rm "$container"
  else
    echo "volume not found"
  fi

  echo -e "\n-----------------------------------------------------------------"
}

function measure_uptime() {
  startedAt="$(docker inspect --format='{{ '{{' }}.State.StartedAt{{ '}}' }}' "$1")"
  finishedAt="$(docker inspect --format='{{ '{{' }}.State.FinishedAt{{ '}}' }}' "$1")"
  startedAtEpoch="$(date -d "$startedAt" "+%s")"
  finishedAtEpoch="$(date -d "$finishedAt" "+%s")"

  if [ "$startedAtEpoch" -lt "$finishedAtEpoch" ]; then
    uptime="UNKNOWN"
  else
    currentTime=$(date "+%s")
    uptime="$(TZ=UTC date -d @"$((currentTime - startedAtEpoch))" "+%H:%M:%S")"
  fi
  echo "$uptime"
}

function detect_state() {
  state="$(docker inspect --format='{{ '{{' }}.State.Health.Status{{ '}}' }}' "$1" 2> /dev/null)"
  if [ $? -eq 0 ]; then
    echo "$state"
  else
    echo "UNKNOWN"
  fi
}

function detect_status() {
  state="$(docker inspect --format='{{ '{{' }}.State.Status{{ '}}' }}' "$1" 2> /dev/null)"
  if [ $? -eq 0 ]; then
    echo "$state"
  else
    echo "UNKNOWN"
  fi
}

function verify_containers() {
  echo -e "\n\tVerify $udid containers:"
  local device=$1
  #echo "device: $device"

  local udid=$2
  #echo "udid: $udid"

  local wireless=$(cat ${devices} | grep "$udid" | cut -d '|' -f 9)

  local container=device-{{ PROJECT_NAME }}-$device-$udid
  if [ ! -L "/dev/$container" ] && [ "$wireless" != "True" ]; then
    echo -e "$container\n\nDISCONNECTED\n"
  else
    echo -e "$container\n"

    local stfState="UNKNOWN"
    local stfStatus="UNKNOWN"
    local stfUptime="UNKNOWN"
    local stfRestarts="UNKNOWN"
    #verify if device containers already exist and do nothing then
    docker ps -a | grep -v appium | grep $container > /dev/null
    if [ $? -eq 0 ]; then
      stfState="$(detect_state $container)"
      stfStatus="$(detect_status $container)"
      stfUptime="$(measure_uptime $container)"
      stfRestarts="$(docker inspect --format='{{ '{{' }}.RestartCount{{ '}}' }}' $container)"
    fi

    local appiumState="UNKNOWN"
    local appiumStatus="UNKNOWN"
    local appiumUptime="UNKNOWN"
    local appiumRestarts="UNKNOWN"
    docker ps -a | grep appium | grep $container > /dev/null
    if [ $? -eq 0 ]; then
      appiumState="$(detect_state $container-appium)"
      appiumStatus="$(detect_status $container-appium)"
      appiumUptime="$(measure_uptime $container-appium)"
      appiumRestarts="$(docker inspect --format='{{ '{{' }}.RestartCount{{ '}}' }}' $container-appium)"
    fi

    local connectorState="UNKNOWN"
    local connectorStatus="UNKNOWN"
    local connectorUptime="UNKNOWN"
    local connectorRestarts="UNKNOWN"
    docker ps -a | grep connector | grep $container > /dev/null
    if [ $? -eq 0 ]; then
      connectorState="$(detect_state $container-connector)"
      connectorStatus="$(detect_status $container-connector)"
      connectorUptime="$(measure_uptime $container-connector)"
      connectorRestarts="$(docker inspect --format='{{ '{{' }}.RestartCount{{ '}}' }}' $container-connector)"
    fi

    echo -e ",| Container,| State,| Status,| Uptime,| Restarts,|
,| ---------,| ---------,| ---------,| ---------,| ---------,|
,| Connector,| $connectorState,| $connectorStatus,| $connectorUptime,| $connectorRestarts,|
,| Appium,| $appiumState,| $appiumStatus,| $appiumUptime,| $appiumRestarts,|
,| STF,| $stfState,| $stfStatus,| $stfUptime,| $stfRestarts,|" | column -t -s ','

  fi
  echo -e "==============================================================\n"
}

function start() {
  local filter_device=$1
  local devices=/usr/local/bin/{{ PROJECT_NAME }}-mcloud-devices.txt

  # if $device is empty do start for all connected devices otherwise start only filtered
  if [ ! -z $filter_device ] && [ "$filter_device" != "ios" ] && [ "$filter_device" != "android" ]; then
    local device_name=$(cat ${devices} | grep "$filter_device" | cut -d '|' -f 1)
    local device_name_underscored=${device_name// /_}
    local udid=$(cat ${devices} | grep "$filter_device" | cut -d '|' -f 3)

    if [ -z "$device_name" ] || [ -z $udid ]; then
      echo_warning "Unable to find device by \"$filter_device\"!"
      return 0
    fi

    create_containers "${device_name}" "${udid}" "${device_name_underscored}" && start_containers "${device_name}" "${udid}" "${device_name_underscored}"
    echo -e "\n-----------------------------------------------------------------"
  else
    while read -r line; do
      local device_name=$(echo ${line} | grep "$filter_device" | cut -d '|' -f 1)
      #echo "device_name: $device_name"
      local device_name_underscored=${device_name// /_}

      local udid=$(echo ${line} | grep "$filter_device" | cut -d '|' -f 3)
      #echo "udid: $udid"
      local wireless=$(echo ${line} | grep "$filter_device" | cut -d '|' -f 9)
      if [ -L "/dev/device-{{ PROJECT_NAME }}-${device_name}-${udid}" ] || [ "$wireless" == "True" ]; then
        create_containers "${device_name}" "${udid}" "${device_name_underscored}" && start_containers "${device_name}" "${udid}" "${device_name_underscored}"
        echo -e "\n-----------------------------------------------------------------"
      fi
    done < ${devices}
  fi
}

function start_containers() {
  echo -e "\n\tStarting '$udid' containers:\n"
  local device=$1
  #echo "device: $device"

  local udid=$2
  #echo "udid: $udid"

  local device_name_underscored=$3

  local container=device-{{ PROJECT_NAME }}-$device_name_underscored-$udid

  docker start $container
  docker ps -a | grep -q "$container-mitm" && docker start $container-mitm
  docker start $container-appium
  docker start $container-uploader
  docker start $container-connector
}

function status() {
  local filter_device=$1
  local devices=/usr/local/bin/{{ PROJECT_NAME }}-mcloud-devices.txt

  # if $device is empty do start for all connected devices otherwise start only filtered
  if [ ! -z $filter_device ] && [ "$filter_device" != "ios" ] && [ "$filter_device" != "android" ]; then
    local device_name=$(cat ${devices} | grep "$filter_device" | cut -d '|' -f 1)
    #echo "device_name: $device_name"
    local device_name_underscored=${device_name// /_}
    local udid=$(cat ${devices} | grep "$filter_device" | cut -d '|' -f 3)
    #echo "udid: $udid"
    verify_containers "${device_name_underscored}" "${udid}"
  else
    while read -r line; do
      local device_name=$(echo ${line} | grep "$filter_device" | cut -d '|' -f 1)
      #echo "device_name: $device_name"
      local device_name_underscored=${device_name// /_}
      local udid=$(echo ${line} | grep "$filter_device" | cut -d '|' -f 3)
      if [ -z $udid ]; then
        continue
      fi
      #echo "udid: $udid"
      verify_containers "${device_name_underscored}" "${udid}"
    done < ${devices}
  fi

}

echo_warning() {
  echo "
      WARNING! $1"
}

echo_telegram() {
  echo "
      For more help join telegram channel: https://t.me/zebrunner
      "
}

function echo_help() {
  echo "
      Usage: zebrunner-farm [option]
      Arguments:
          status               Status of MCloud Agent and each whitelisted device
          start [udid]         Start devices containers or exact device by udid
          stop [udid]          Stop and keep devices containers or exact device by udid
          restart [udid]       Restart all devices containers or exact device by udid
          down [udid]          Stop and remove devices containers
          ansible ['devices']  Run ansible-playbook script with custom or predefined args"
  echo_telegram
  exit 0
}

# IMPORTANT! In case of any changes please copy them in ./zebrunner.sh !
function ansible() {
  if [[ "$1" == "" ]]; then
    arg="devices.yml"
  elif [[ "$1" == "devices" ]]; then
    arg="devices.yml --tag registerDevices"
  else
    arg="$@ devices.yml"
  fi

  echo "ansible-playbook -vvv -i hosts $arg"
  echo "*******************************************************************"
  ansible-playbook -vvv -i hosts $arg
}

#CONTAINERS=( `docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep device | grep -v appium | cut -d '-' -f 2-` )
#echo CONTAINERS: $CONTAINERS

#CONNECTED_DEVICES=( `ls /dev/ | grep device | cut -d '-' -f 2-` )
#echo CONNECTED_DEVICES: $CONNECTED_DEVICES

case "$ACTION" in
status)
  status $2
  ;;
add)
  # #122 on start obligatory re-created any existing exited containers
  # add action means physical connect via usb and as result we have to remove any existing container for device!
  down $2
  start $2
  ;;
bind)
  echo "do nothing"
  ;;
remove)
  down $2
  ;;
start)
  start $2
  ;;
stop)
  stop $2
  ;;
restart)
  down $2
  start $2
  ;;
down)
  down $2
  ;;
ansible)
  ansible "${@:2}"
  ;;
shutdown)
  shutdown
  ;;
version)
  version
  ;;
*)
  if [ ! -z $1 ]; then
    echo "Unknown option detected: $1"
  fi
  echo_help
  exit 1
  ;;
esac

exit 0
